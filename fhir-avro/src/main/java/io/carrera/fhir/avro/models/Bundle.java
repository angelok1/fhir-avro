/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Bundle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9051956903757081205L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bundle\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Patient\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"identifier\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"identifier_record\",\"fields\":[{\"name\":\"system\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}}},{\"name\":\"name\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"name_record\",\"fields\":[{\"name\":\"use\",\"type\":\"string\"},{\"name\":\"family\",\"type\":\"string\"},{\"name\":\"given\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"prefix\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}}},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"birthDate\",\"type\":[\"null\",\"string\"]},{\"name\":\"maritalStatus\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"display\",\"type\":\"string\"}]}}},{\"name\":\"text\",\"type\":[\"string\",\"null\"]}]}]}]},{\"type\":\"record\",\"name\":\"Observation\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"category\",\"type\":[\"CodeableConcept\",\"null\"]},{\"name\":\"code\",\"type\":\"CodeableConcept\"},{\"name\":\"subject\",\"type\":{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":\"string\"}]}},{\"name\":\"encounter\",\"type\":[\"null\",\"Reference\"],\"default\":null},{\"name\":\"effectiveDateTime\",\"type\":\"int\",\"logicalType\":\"date\"},{\"name\":\"issued\",\"type\":\"int\",\"logicalType\":\"date\"},{\"name\":\"value\",\"type\":[\"null\",\"string\",{\"type\":\"record\",\"name\":\"Quantity\",\"fields\":[{\"name\":\"value\",\"type\":\"float\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"system\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}]}]},{\"type\":\"record\",\"name\":\"MedicationStatement\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"medicationCodeableConcept\",\"type\":\"CodeableConcept\"},{\"name\":\"subject\",\"type\":\"Reference\"}]},{\"type\":\"record\",\"name\":\"AllergyIntolerance\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"clinicalStatus\",\"type\":\"string\"},{\"name\":\"verificationStatus\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"CodeableConcept\"},{\"name\":\"patient\",\"type\":\"Reference\"}]},{\"type\":\"record\",\"name\":\"Condition\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"clinicalStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"verificationStatus\",\"type\":[\"string\",\"null\"]},{\"name\":\"code\",\"type\":\"CodeableConcept\"},{\"name\":\"subject\",\"type\":\"Reference\"},{\"name\":\"encounter\",\"type\":[\"null\",\"Reference\"],\"default\":null},{\"name\":\"onsetDateTime\",\"type\":\"int\",\"logicalType\":\"date\"}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bundle> ENCODER =
      new BinaryMessageEncoder<Bundle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bundle> DECODER =
      new BinaryMessageDecoder<Bundle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Bundle> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Bundle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Bundle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bundle>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Bundle to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Bundle from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Bundle instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Bundle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Object> children;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bundle() {}

  /**
   * All-args constructor.
   * @param children The new value for children
   */
  public Bundle(java.util.List<java.lang.Object> children) {
    this.children = children;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return children;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: children = (java.util.List<java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'children' field.
   * @return The value of the 'children' field.
   */
  public java.util.List<java.lang.Object> getChildren() {
    return children;
  }


  /**
   * Sets the value of the 'children' field.
   * @param value the value to set.
   */
  public void setChildren(java.util.List<java.lang.Object> value) {
    this.children = value;
  }

  /**
   * Creates a new Bundle RecordBuilder.
   * @return A new Bundle RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Bundle.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.Bundle.Builder();
  }

  /**
   * Creates a new Bundle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bundle RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Bundle.Builder newBuilder(io.carrera.fhir.avro.models.Bundle.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Bundle.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Bundle.Builder(other);
    }
  }

  /**
   * Creates a new Bundle RecordBuilder by copying an existing Bundle instance.
   * @param other The existing instance to copy.
   * @return A new Bundle RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Bundle.Builder newBuilder(io.carrera.fhir.avro.models.Bundle other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Bundle.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Bundle.Builder(other);
    }
  }

  /**
   * RecordBuilder for Bundle instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bundle>
    implements org.apache.avro.data.RecordBuilder<Bundle> {

    private java.util.List<java.lang.Object> children;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Bundle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.children)) {
        this.children = data().deepCopy(fields()[0].schema(), other.children);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Bundle instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Bundle other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.children)) {
        this.children = data().deepCopy(fields()[0].schema(), other.children);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'children' field.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getChildren() {
      return children;
    }


    /**
      * Sets the value of the 'children' field.
      * @param value The value of 'children'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Bundle.Builder setChildren(java.util.List<java.lang.Object> value) {
      validate(fields()[0], value);
      this.children = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'children' field has been set.
      * @return True if the 'children' field has been set, false otherwise.
      */
    public boolean hasChildren() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'children' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Bundle.Builder clearChildren() {
      children = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bundle build() {
      try {
        Bundle record = new Bundle();
        record.children = fieldSetFlags()[0] ? this.children : (java.util.List<java.lang.Object>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bundle>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bundle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bundle>
    READER$ = (org.apache.avro.io.DatumReader<Bundle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










