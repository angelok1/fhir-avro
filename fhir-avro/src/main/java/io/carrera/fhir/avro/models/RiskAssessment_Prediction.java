/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RiskAssessment_Prediction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4353712300112258621L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RiskAssessment_Prediction\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"outcome\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null}]}}},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}]},{\"name\":\"probabilityDecimal\",\"type\":[\"null\",\"double\"]},{\"name\":\"probabilityRange\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Range\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"low\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Quantity\",\"fields\":[{\"name\":\"value\",\"type\":\"float\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"system\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}]},{\"name\":\"high\",\"type\":[\"null\",\"Quantity\"]}]}]},{\"name\":\"qualitativeRisk\",\"type\":[\"null\",\"CodeableConcept\"]},{\"name\":\"relativeRisk\",\"type\":[\"null\",\"double\"]},{\"name\":\"whenPeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Period\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"start\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}]},{\"name\":\"end\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}]}]}]},{\"name\":\"whenRange\",\"type\":[\"null\",\"Range\"]},{\"name\":\"rationale\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<RiskAssessment_Prediction> ENCODER =
      new BinaryMessageEncoder<RiskAssessment_Prediction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RiskAssessment_Prediction> DECODER =
      new BinaryMessageDecoder<RiskAssessment_Prediction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RiskAssessment_Prediction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RiskAssessment_Prediction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RiskAssessment_Prediction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RiskAssessment_Prediction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RiskAssessment_Prediction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RiskAssessment_Prediction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RiskAssessment_Prediction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RiskAssessment_Prediction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public io.carrera.fhir.avro.models.CodeableConcept outcome;
  @Deprecated public java.lang.Double probabilityDecimal;
  @Deprecated public io.carrera.fhir.avro.models.Range probabilityRange;
  @Deprecated public io.carrera.fhir.avro.models.CodeableConcept qualitativeRisk;
  @Deprecated public java.lang.Double relativeRisk;
  @Deprecated public io.carrera.fhir.avro.models.Period whenPeriod;
  @Deprecated public io.carrera.fhir.avro.models.Range whenRange;
  @Deprecated public java.lang.CharSequence rationale;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RiskAssessment_Prediction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param outcome The new value for outcome
   * @param probabilityDecimal The new value for probabilityDecimal
   * @param probabilityRange The new value for probabilityRange
   * @param qualitativeRisk The new value for qualitativeRisk
   * @param relativeRisk The new value for relativeRisk
   * @param whenPeriod The new value for whenPeriod
   * @param whenRange The new value for whenRange
   * @param rationale The new value for rationale
   */
  public RiskAssessment_Prediction(java.lang.CharSequence id, io.carrera.fhir.avro.models.CodeableConcept outcome, java.lang.Double probabilityDecimal, io.carrera.fhir.avro.models.Range probabilityRange, io.carrera.fhir.avro.models.CodeableConcept qualitativeRisk, java.lang.Double relativeRisk, io.carrera.fhir.avro.models.Period whenPeriod, io.carrera.fhir.avro.models.Range whenRange, java.lang.CharSequence rationale) {
    this.id = id;
    this.outcome = outcome;
    this.probabilityDecimal = probabilityDecimal;
    this.probabilityRange = probabilityRange;
    this.qualitativeRisk = qualitativeRisk;
    this.relativeRisk = relativeRisk;
    this.whenPeriod = whenPeriod;
    this.whenRange = whenRange;
    this.rationale = rationale;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return outcome;
    case 2: return probabilityDecimal;
    case 3: return probabilityRange;
    case 4: return qualitativeRisk;
    case 5: return relativeRisk;
    case 6: return whenPeriod;
    case 7: return whenRange;
    case 8: return rationale;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: outcome = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 2: probabilityDecimal = (java.lang.Double)value$; break;
    case 3: probabilityRange = (io.carrera.fhir.avro.models.Range)value$; break;
    case 4: qualitativeRisk = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 5: relativeRisk = (java.lang.Double)value$; break;
    case 6: whenPeriod = (io.carrera.fhir.avro.models.Period)value$; break;
    case 7: whenRange = (io.carrera.fhir.avro.models.Range)value$; break;
    case 8: rationale = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'outcome' field.
   * @return The value of the 'outcome' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getOutcome() {
    return outcome;
  }


  /**
   * Sets the value of the 'outcome' field.
   * @param value the value to set.
   */
  public void setOutcome(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.outcome = value;
  }

  /**
   * Gets the value of the 'probabilityDecimal' field.
   * @return The value of the 'probabilityDecimal' field.
   */
  public java.lang.Double getProbabilityDecimal() {
    return probabilityDecimal;
  }


  /**
   * Sets the value of the 'probabilityDecimal' field.
   * @param value the value to set.
   */
  public void setProbabilityDecimal(java.lang.Double value) {
    this.probabilityDecimal = value;
  }

  /**
   * Gets the value of the 'probabilityRange' field.
   * @return The value of the 'probabilityRange' field.
   */
  public io.carrera.fhir.avro.models.Range getProbabilityRange() {
    return probabilityRange;
  }


  /**
   * Sets the value of the 'probabilityRange' field.
   * @param value the value to set.
   */
  public void setProbabilityRange(io.carrera.fhir.avro.models.Range value) {
    this.probabilityRange = value;
  }

  /**
   * Gets the value of the 'qualitativeRisk' field.
   * @return The value of the 'qualitativeRisk' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getQualitativeRisk() {
    return qualitativeRisk;
  }


  /**
   * Sets the value of the 'qualitativeRisk' field.
   * @param value the value to set.
   */
  public void setQualitativeRisk(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.qualitativeRisk = value;
  }

  /**
   * Gets the value of the 'relativeRisk' field.
   * @return The value of the 'relativeRisk' field.
   */
  public java.lang.Double getRelativeRisk() {
    return relativeRisk;
  }


  /**
   * Sets the value of the 'relativeRisk' field.
   * @param value the value to set.
   */
  public void setRelativeRisk(java.lang.Double value) {
    this.relativeRisk = value;
  }

  /**
   * Gets the value of the 'whenPeriod' field.
   * @return The value of the 'whenPeriod' field.
   */
  public io.carrera.fhir.avro.models.Period getWhenPeriod() {
    return whenPeriod;
  }


  /**
   * Sets the value of the 'whenPeriod' field.
   * @param value the value to set.
   */
  public void setWhenPeriod(io.carrera.fhir.avro.models.Period value) {
    this.whenPeriod = value;
  }

  /**
   * Gets the value of the 'whenRange' field.
   * @return The value of the 'whenRange' field.
   */
  public io.carrera.fhir.avro.models.Range getWhenRange() {
    return whenRange;
  }


  /**
   * Sets the value of the 'whenRange' field.
   * @param value the value to set.
   */
  public void setWhenRange(io.carrera.fhir.avro.models.Range value) {
    this.whenRange = value;
  }

  /**
   * Gets the value of the 'rationale' field.
   * @return The value of the 'rationale' field.
   */
  public java.lang.CharSequence getRationale() {
    return rationale;
  }


  /**
   * Sets the value of the 'rationale' field.
   * @param value the value to set.
   */
  public void setRationale(java.lang.CharSequence value) {
    this.rationale = value;
  }

  /**
   * Creates a new RiskAssessment_Prediction RecordBuilder.
   * @return A new RiskAssessment_Prediction RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder();
  }

  /**
   * Creates a new RiskAssessment_Prediction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RiskAssessment_Prediction RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder newBuilder(io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder();
    } else {
      return new io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder(other);
    }
  }

  /**
   * Creates a new RiskAssessment_Prediction RecordBuilder by copying an existing RiskAssessment_Prediction instance.
   * @param other The existing instance to copy.
   * @return A new RiskAssessment_Prediction RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder newBuilder(io.carrera.fhir.avro.models.RiskAssessment_Prediction other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder();
    } else {
      return new io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder(other);
    }
  }

  /**
   * RecordBuilder for RiskAssessment_Prediction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RiskAssessment_Prediction>
    implements org.apache.avro.data.RecordBuilder<RiskAssessment_Prediction> {

    private java.lang.CharSequence id;
    private io.carrera.fhir.avro.models.CodeableConcept outcome;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder outcomeBuilder;
    private java.lang.Double probabilityDecimal;
    private io.carrera.fhir.avro.models.Range probabilityRange;
    private io.carrera.fhir.avro.models.Range.Builder probabilityRangeBuilder;
    private io.carrera.fhir.avro.models.CodeableConcept qualitativeRisk;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder qualitativeRiskBuilder;
    private java.lang.Double relativeRisk;
    private io.carrera.fhir.avro.models.Period whenPeriod;
    private io.carrera.fhir.avro.models.Period.Builder whenPeriodBuilder;
    private io.carrera.fhir.avro.models.Range whenRange;
    private io.carrera.fhir.avro.models.Range.Builder whenRangeBuilder;
    private java.lang.CharSequence rationale;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.outcome)) {
        this.outcome = data().deepCopy(fields()[1].schema(), other.outcome);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasOutcomeBuilder()) {
        this.outcomeBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getOutcomeBuilder());
      }
      if (isValidValue(fields()[2], other.probabilityDecimal)) {
        this.probabilityDecimal = data().deepCopy(fields()[2].schema(), other.probabilityDecimal);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.probabilityRange)) {
        this.probabilityRange = data().deepCopy(fields()[3].schema(), other.probabilityRange);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasProbabilityRangeBuilder()) {
        this.probabilityRangeBuilder = io.carrera.fhir.avro.models.Range.newBuilder(other.getProbabilityRangeBuilder());
      }
      if (isValidValue(fields()[4], other.qualitativeRisk)) {
        this.qualitativeRisk = data().deepCopy(fields()[4].schema(), other.qualitativeRisk);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasQualitativeRiskBuilder()) {
        this.qualitativeRiskBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getQualitativeRiskBuilder());
      }
      if (isValidValue(fields()[5], other.relativeRisk)) {
        this.relativeRisk = data().deepCopy(fields()[5].schema(), other.relativeRisk);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.whenPeriod)) {
        this.whenPeriod = data().deepCopy(fields()[6].schema(), other.whenPeriod);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasWhenPeriodBuilder()) {
        this.whenPeriodBuilder = io.carrera.fhir.avro.models.Period.newBuilder(other.getWhenPeriodBuilder());
      }
      if (isValidValue(fields()[7], other.whenRange)) {
        this.whenRange = data().deepCopy(fields()[7].schema(), other.whenRange);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasWhenRangeBuilder()) {
        this.whenRangeBuilder = io.carrera.fhir.avro.models.Range.newBuilder(other.getWhenRangeBuilder());
      }
      if (isValidValue(fields()[8], other.rationale)) {
        this.rationale = data().deepCopy(fields()[8].schema(), other.rationale);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing RiskAssessment_Prediction instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.RiskAssessment_Prediction other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.outcome)) {
        this.outcome = data().deepCopy(fields()[1].schema(), other.outcome);
        fieldSetFlags()[1] = true;
      }
      this.outcomeBuilder = null;
      if (isValidValue(fields()[2], other.probabilityDecimal)) {
        this.probabilityDecimal = data().deepCopy(fields()[2].schema(), other.probabilityDecimal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.probabilityRange)) {
        this.probabilityRange = data().deepCopy(fields()[3].schema(), other.probabilityRange);
        fieldSetFlags()[3] = true;
      }
      this.probabilityRangeBuilder = null;
      if (isValidValue(fields()[4], other.qualitativeRisk)) {
        this.qualitativeRisk = data().deepCopy(fields()[4].schema(), other.qualitativeRisk);
        fieldSetFlags()[4] = true;
      }
      this.qualitativeRiskBuilder = null;
      if (isValidValue(fields()[5], other.relativeRisk)) {
        this.relativeRisk = data().deepCopy(fields()[5].schema(), other.relativeRisk);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.whenPeriod)) {
        this.whenPeriod = data().deepCopy(fields()[6].schema(), other.whenPeriod);
        fieldSetFlags()[6] = true;
      }
      this.whenPeriodBuilder = null;
      if (isValidValue(fields()[7], other.whenRange)) {
        this.whenRange = data().deepCopy(fields()[7].schema(), other.whenRange);
        fieldSetFlags()[7] = true;
      }
      this.whenRangeBuilder = null;
      if (isValidValue(fields()[8], other.rationale)) {
        this.rationale = data().deepCopy(fields()[8].schema(), other.rationale);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'outcome' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getOutcome() {
      return outcome;
    }


    /**
      * Sets the value of the 'outcome' field.
      * @param value The value of 'outcome'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setOutcome(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[1], value);
      this.outcomeBuilder = null;
      this.outcome = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'outcome' field has been set.
      * @return True if the 'outcome' field has been set, false otherwise.
      */
    public boolean hasOutcome() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'outcome' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getOutcomeBuilder() {
      if (outcomeBuilder == null) {
        if (hasOutcome()) {
          setOutcomeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(outcome));
        } else {
          setOutcomeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return outcomeBuilder;
    }

    /**
     * Sets the Builder instance for the 'outcome' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setOutcomeBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearOutcome();
      outcomeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'outcome' field has an active Builder instance
     * @return True if the 'outcome' field has an active Builder instance
     */
    public boolean hasOutcomeBuilder() {
      return outcomeBuilder != null;
    }

    /**
      * Clears the value of the 'outcome' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearOutcome() {
      outcome = null;
      outcomeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'probabilityDecimal' field.
      * @return The value.
      */
    public java.lang.Double getProbabilityDecimal() {
      return probabilityDecimal;
    }


    /**
      * Sets the value of the 'probabilityDecimal' field.
      * @param value The value of 'probabilityDecimal'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setProbabilityDecimal(java.lang.Double value) {
      validate(fields()[2], value);
      this.probabilityDecimal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'probabilityDecimal' field has been set.
      * @return True if the 'probabilityDecimal' field has been set, false otherwise.
      */
    public boolean hasProbabilityDecimal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'probabilityDecimal' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearProbabilityDecimal() {
      probabilityDecimal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'probabilityRange' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Range getProbabilityRange() {
      return probabilityRange;
    }


    /**
      * Sets the value of the 'probabilityRange' field.
      * @param value The value of 'probabilityRange'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setProbabilityRange(io.carrera.fhir.avro.models.Range value) {
      validate(fields()[3], value);
      this.probabilityRangeBuilder = null;
      this.probabilityRange = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'probabilityRange' field has been set.
      * @return True if the 'probabilityRange' field has been set, false otherwise.
      */
    public boolean hasProbabilityRange() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'probabilityRange' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Range.Builder getProbabilityRangeBuilder() {
      if (probabilityRangeBuilder == null) {
        if (hasProbabilityRange()) {
          setProbabilityRangeBuilder(io.carrera.fhir.avro.models.Range.newBuilder(probabilityRange));
        } else {
          setProbabilityRangeBuilder(io.carrera.fhir.avro.models.Range.newBuilder());
        }
      }
      return probabilityRangeBuilder;
    }

    /**
     * Sets the Builder instance for the 'probabilityRange' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setProbabilityRangeBuilder(io.carrera.fhir.avro.models.Range.Builder value) {
      clearProbabilityRange();
      probabilityRangeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'probabilityRange' field has an active Builder instance
     * @return True if the 'probabilityRange' field has an active Builder instance
     */
    public boolean hasProbabilityRangeBuilder() {
      return probabilityRangeBuilder != null;
    }

    /**
      * Clears the value of the 'probabilityRange' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearProbabilityRange() {
      probabilityRange = null;
      probabilityRangeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualitativeRisk' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getQualitativeRisk() {
      return qualitativeRisk;
    }


    /**
      * Sets the value of the 'qualitativeRisk' field.
      * @param value The value of 'qualitativeRisk'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setQualitativeRisk(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[4], value);
      this.qualitativeRiskBuilder = null;
      this.qualitativeRisk = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'qualitativeRisk' field has been set.
      * @return True if the 'qualitativeRisk' field has been set, false otherwise.
      */
    public boolean hasQualitativeRisk() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'qualitativeRisk' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getQualitativeRiskBuilder() {
      if (qualitativeRiskBuilder == null) {
        if (hasQualitativeRisk()) {
          setQualitativeRiskBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(qualitativeRisk));
        } else {
          setQualitativeRiskBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return qualitativeRiskBuilder;
    }

    /**
     * Sets the Builder instance for the 'qualitativeRisk' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setQualitativeRiskBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearQualitativeRisk();
      qualitativeRiskBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'qualitativeRisk' field has an active Builder instance
     * @return True if the 'qualitativeRisk' field has an active Builder instance
     */
    public boolean hasQualitativeRiskBuilder() {
      return qualitativeRiskBuilder != null;
    }

    /**
      * Clears the value of the 'qualitativeRisk' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearQualitativeRisk() {
      qualitativeRisk = null;
      qualitativeRiskBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'relativeRisk' field.
      * @return The value.
      */
    public java.lang.Double getRelativeRisk() {
      return relativeRisk;
    }


    /**
      * Sets the value of the 'relativeRisk' field.
      * @param value The value of 'relativeRisk'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setRelativeRisk(java.lang.Double value) {
      validate(fields()[5], value);
      this.relativeRisk = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'relativeRisk' field has been set.
      * @return True if the 'relativeRisk' field has been set, false otherwise.
      */
    public boolean hasRelativeRisk() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'relativeRisk' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearRelativeRisk() {
      relativeRisk = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'whenPeriod' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Period getWhenPeriod() {
      return whenPeriod;
    }


    /**
      * Sets the value of the 'whenPeriod' field.
      * @param value The value of 'whenPeriod'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setWhenPeriod(io.carrera.fhir.avro.models.Period value) {
      validate(fields()[6], value);
      this.whenPeriodBuilder = null;
      this.whenPeriod = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'whenPeriod' field has been set.
      * @return True if the 'whenPeriod' field has been set, false otherwise.
      */
    public boolean hasWhenPeriod() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'whenPeriod' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Period.Builder getWhenPeriodBuilder() {
      if (whenPeriodBuilder == null) {
        if (hasWhenPeriod()) {
          setWhenPeriodBuilder(io.carrera.fhir.avro.models.Period.newBuilder(whenPeriod));
        } else {
          setWhenPeriodBuilder(io.carrera.fhir.avro.models.Period.newBuilder());
        }
      }
      return whenPeriodBuilder;
    }

    /**
     * Sets the Builder instance for the 'whenPeriod' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setWhenPeriodBuilder(io.carrera.fhir.avro.models.Period.Builder value) {
      clearWhenPeriod();
      whenPeriodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'whenPeriod' field has an active Builder instance
     * @return True if the 'whenPeriod' field has an active Builder instance
     */
    public boolean hasWhenPeriodBuilder() {
      return whenPeriodBuilder != null;
    }

    /**
      * Clears the value of the 'whenPeriod' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearWhenPeriod() {
      whenPeriod = null;
      whenPeriodBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'whenRange' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Range getWhenRange() {
      return whenRange;
    }


    /**
      * Sets the value of the 'whenRange' field.
      * @param value The value of 'whenRange'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setWhenRange(io.carrera.fhir.avro.models.Range value) {
      validate(fields()[7], value);
      this.whenRangeBuilder = null;
      this.whenRange = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'whenRange' field has been set.
      * @return True if the 'whenRange' field has been set, false otherwise.
      */
    public boolean hasWhenRange() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'whenRange' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Range.Builder getWhenRangeBuilder() {
      if (whenRangeBuilder == null) {
        if (hasWhenRange()) {
          setWhenRangeBuilder(io.carrera.fhir.avro.models.Range.newBuilder(whenRange));
        } else {
          setWhenRangeBuilder(io.carrera.fhir.avro.models.Range.newBuilder());
        }
      }
      return whenRangeBuilder;
    }

    /**
     * Sets the Builder instance for the 'whenRange' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setWhenRangeBuilder(io.carrera.fhir.avro.models.Range.Builder value) {
      clearWhenRange();
      whenRangeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'whenRange' field has an active Builder instance
     * @return True if the 'whenRange' field has an active Builder instance
     */
    public boolean hasWhenRangeBuilder() {
      return whenRangeBuilder != null;
    }

    /**
      * Clears the value of the 'whenRange' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearWhenRange() {
      whenRange = null;
      whenRangeBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'rationale' field.
      * @return The value.
      */
    public java.lang.CharSequence getRationale() {
      return rationale;
    }


    /**
      * Sets the value of the 'rationale' field.
      * @param value The value of 'rationale'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder setRationale(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.rationale = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'rationale' field has been set.
      * @return True if the 'rationale' field has been set, false otherwise.
      */
    public boolean hasRationale() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'rationale' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment_Prediction.Builder clearRationale() {
      rationale = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RiskAssessment_Prediction build() {
      try {
        RiskAssessment_Prediction record = new RiskAssessment_Prediction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (outcomeBuilder != null) {
          try {
            record.outcome = this.outcomeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("outcome"));
            throw e;
          }
        } else {
          record.outcome = fieldSetFlags()[1] ? this.outcome : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[1]);
        }
        record.probabilityDecimal = fieldSetFlags()[2] ? this.probabilityDecimal : (java.lang.Double) defaultValue(fields()[2]);
        if (probabilityRangeBuilder != null) {
          try {
            record.probabilityRange = this.probabilityRangeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("probabilityRange"));
            throw e;
          }
        } else {
          record.probabilityRange = fieldSetFlags()[3] ? this.probabilityRange : (io.carrera.fhir.avro.models.Range) defaultValue(fields()[3]);
        }
        if (qualitativeRiskBuilder != null) {
          try {
            record.qualitativeRisk = this.qualitativeRiskBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("qualitativeRisk"));
            throw e;
          }
        } else {
          record.qualitativeRisk = fieldSetFlags()[4] ? this.qualitativeRisk : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[4]);
        }
        record.relativeRisk = fieldSetFlags()[5] ? this.relativeRisk : (java.lang.Double) defaultValue(fields()[5]);
        if (whenPeriodBuilder != null) {
          try {
            record.whenPeriod = this.whenPeriodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("whenPeriod"));
            throw e;
          }
        } else {
          record.whenPeriod = fieldSetFlags()[6] ? this.whenPeriod : (io.carrera.fhir.avro.models.Period) defaultValue(fields()[6]);
        }
        if (whenRangeBuilder != null) {
          try {
            record.whenRange = this.whenRangeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("whenRange"));
            throw e;
          }
        } else {
          record.whenRange = fieldSetFlags()[7] ? this.whenRange : (io.carrera.fhir.avro.models.Range) defaultValue(fields()[7]);
        }
        record.rationale = fieldSetFlags()[8] ? this.rationale : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RiskAssessment_Prediction>
    WRITER$ = (org.apache.avro.io.DatumWriter<RiskAssessment_Prediction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RiskAssessment_Prediction>
    READER$ = (org.apache.avro.io.DatumReader<RiskAssessment_Prediction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










