/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Identifier extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3676168890373058994L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Identifier\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"use\",\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"]}]}}}]}]},{\"name\":\"system\",\"type\":[\"null\",\"string\"]},{\"name\":\"period\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Period\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"start\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}]},{\"name\":\"end\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}]}]}]},{\"name\":\"assigner\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":\"string\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Identifier> ENCODER =
      new BinaryMessageEncoder<Identifier>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Identifier> DECODER =
      new BinaryMessageDecoder<Identifier>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Identifier> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Identifier> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Identifier> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Identifier>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Identifier to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Identifier from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Identifier instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Identifier fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence use;
   private io.carrera.fhir.avro.models.CodeableConcept type;
   private java.lang.CharSequence system;
   private io.carrera.fhir.avro.models.Period period;
   private io.carrera.fhir.avro.models.Reference assigner;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Identifier() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param use The new value for use
   * @param type The new value for type
   * @param system The new value for system
   * @param period The new value for period
   * @param assigner The new value for assigner
   */
  public Identifier(java.lang.CharSequence id, java.lang.CharSequence use, io.carrera.fhir.avro.models.CodeableConcept type, java.lang.CharSequence system, io.carrera.fhir.avro.models.Period period, io.carrera.fhir.avro.models.Reference assigner) {
    this.id = id;
    this.use = use;
    this.type = type;
    this.system = system;
    this.period = period;
    this.assigner = assigner;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return use;
    case 2: return type;
    case 3: return system;
    case 4: return period;
    case 5: return assigner;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: use = (java.lang.CharSequence)value$; break;
    case 2: type = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 3: system = (java.lang.CharSequence)value$; break;
    case 4: period = (io.carrera.fhir.avro.models.Period)value$; break;
    case 5: assigner = (io.carrera.fhir.avro.models.Reference)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'use' field.
   * @return The value of the 'use' field.
   */
  public java.lang.CharSequence getUse() {
    return use;
  }


  /**
   * Sets the value of the 'use' field.
   * @param value the value to set.
   */
  public void setUse(java.lang.CharSequence value) {
    this.use = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'system' field.
   * @return The value of the 'system' field.
   */
  public java.lang.CharSequence getSystem() {
    return system;
  }


  /**
   * Sets the value of the 'system' field.
   * @param value the value to set.
   */
  public void setSystem(java.lang.CharSequence value) {
    this.system = value;
  }

  /**
   * Gets the value of the 'period' field.
   * @return The value of the 'period' field.
   */
  public io.carrera.fhir.avro.models.Period getPeriod() {
    return period;
  }


  /**
   * Sets the value of the 'period' field.
   * @param value the value to set.
   */
  public void setPeriod(io.carrera.fhir.avro.models.Period value) {
    this.period = value;
  }

  /**
   * Gets the value of the 'assigner' field.
   * @return The value of the 'assigner' field.
   */
  public io.carrera.fhir.avro.models.Reference getAssigner() {
    return assigner;
  }


  /**
   * Sets the value of the 'assigner' field.
   * @param value the value to set.
   */
  public void setAssigner(io.carrera.fhir.avro.models.Reference value) {
    this.assigner = value;
  }

  /**
   * Creates a new Identifier RecordBuilder.
   * @return A new Identifier RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Identifier.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.Identifier.Builder();
  }

  /**
   * Creates a new Identifier RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Identifier RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Identifier.Builder newBuilder(io.carrera.fhir.avro.models.Identifier.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Identifier.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Identifier.Builder(other);
    }
  }

  /**
   * Creates a new Identifier RecordBuilder by copying an existing Identifier instance.
   * @param other The existing instance to copy.
   * @return A new Identifier RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Identifier.Builder newBuilder(io.carrera.fhir.avro.models.Identifier other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Identifier.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Identifier.Builder(other);
    }
  }

  /**
   * RecordBuilder for Identifier instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Identifier>
    implements org.apache.avro.data.RecordBuilder<Identifier> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence use;
    private io.carrera.fhir.avro.models.CodeableConcept type;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder typeBuilder;
    private java.lang.CharSequence system;
    private io.carrera.fhir.avro.models.Period period;
    private io.carrera.fhir.avro.models.Period.Builder periodBuilder;
    private io.carrera.fhir.avro.models.Reference assigner;
    private io.carrera.fhir.avro.models.Reference.Builder assignerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Identifier.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.use)) {
        this.use = data().deepCopy(fields()[1].schema(), other.use);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasTypeBuilder()) {
        this.typeBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getTypeBuilder());
      }
      if (isValidValue(fields()[3], other.system)) {
        this.system = data().deepCopy(fields()[3].schema(), other.system);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.period)) {
        this.period = data().deepCopy(fields()[4].schema(), other.period);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasPeriodBuilder()) {
        this.periodBuilder = io.carrera.fhir.avro.models.Period.newBuilder(other.getPeriodBuilder());
      }
      if (isValidValue(fields()[5], other.assigner)) {
        this.assigner = data().deepCopy(fields()[5].schema(), other.assigner);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasAssignerBuilder()) {
        this.assignerBuilder = io.carrera.fhir.avro.models.Reference.newBuilder(other.getAssignerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Identifier instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Identifier other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.use)) {
        this.use = data().deepCopy(fields()[1].schema(), other.use);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      this.typeBuilder = null;
      if (isValidValue(fields()[3], other.system)) {
        this.system = data().deepCopy(fields()[3].schema(), other.system);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.period)) {
        this.period = data().deepCopy(fields()[4].schema(), other.period);
        fieldSetFlags()[4] = true;
      }
      this.periodBuilder = null;
      if (isValidValue(fields()[5], other.assigner)) {
        this.assigner = data().deepCopy(fields()[5].schema(), other.assigner);
        fieldSetFlags()[5] = true;
      }
      this.assignerBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'use' field.
      * @return The value.
      */
    public java.lang.CharSequence getUse() {
      return use;
    }


    /**
      * Sets the value of the 'use' field.
      * @param value The value of 'use'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setUse(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.use = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'use' field has been set.
      * @return True if the 'use' field has been set, false otherwise.
      */
    public boolean hasUse() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'use' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearUse() {
      use = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setType(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[2], value);
      this.typeBuilder = null;
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'type' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getTypeBuilder() {
      if (typeBuilder == null) {
        if (hasType()) {
          setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(type));
        } else {
          setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return typeBuilder;
    }

    /**
     * Sets the Builder instance for the 'type' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Identifier.Builder setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearType();
      typeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'type' field has an active Builder instance
     * @return True if the 'type' field has an active Builder instance
     */
    public boolean hasTypeBuilder() {
      return typeBuilder != null;
    }

    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearType() {
      type = null;
      typeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'system' field.
      * @return The value.
      */
    public java.lang.CharSequence getSystem() {
      return system;
    }


    /**
      * Sets the value of the 'system' field.
      * @param value The value of 'system'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setSystem(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.system = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'system' field has been set.
      * @return True if the 'system' field has been set, false otherwise.
      */
    public boolean hasSystem() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'system' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearSystem() {
      system = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'period' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Period getPeriod() {
      return period;
    }


    /**
      * Sets the value of the 'period' field.
      * @param value The value of 'period'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setPeriod(io.carrera.fhir.avro.models.Period value) {
      validate(fields()[4], value);
      this.periodBuilder = null;
      this.period = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'period' field has been set.
      * @return True if the 'period' field has been set, false otherwise.
      */
    public boolean hasPeriod() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'period' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Period.Builder getPeriodBuilder() {
      if (periodBuilder == null) {
        if (hasPeriod()) {
          setPeriodBuilder(io.carrera.fhir.avro.models.Period.newBuilder(period));
        } else {
          setPeriodBuilder(io.carrera.fhir.avro.models.Period.newBuilder());
        }
      }
      return periodBuilder;
    }

    /**
     * Sets the Builder instance for the 'period' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Identifier.Builder setPeriodBuilder(io.carrera.fhir.avro.models.Period.Builder value) {
      clearPeriod();
      periodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'period' field has an active Builder instance
     * @return True if the 'period' field has an active Builder instance
     */
    public boolean hasPeriodBuilder() {
      return periodBuilder != null;
    }

    /**
      * Clears the value of the 'period' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearPeriod() {
      period = null;
      periodBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'assigner' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Reference getAssigner() {
      return assigner;
    }


    /**
      * Sets the value of the 'assigner' field.
      * @param value The value of 'assigner'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder setAssigner(io.carrera.fhir.avro.models.Reference value) {
      validate(fields()[5], value);
      this.assignerBuilder = null;
      this.assigner = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'assigner' field has been set.
      * @return True if the 'assigner' field has been set, false otherwise.
      */
    public boolean hasAssigner() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'assigner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Reference.Builder getAssignerBuilder() {
      if (assignerBuilder == null) {
        if (hasAssigner()) {
          setAssignerBuilder(io.carrera.fhir.avro.models.Reference.newBuilder(assigner));
        } else {
          setAssignerBuilder(io.carrera.fhir.avro.models.Reference.newBuilder());
        }
      }
      return assignerBuilder;
    }

    /**
     * Sets the Builder instance for the 'assigner' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Identifier.Builder setAssignerBuilder(io.carrera.fhir.avro.models.Reference.Builder value) {
      clearAssigner();
      assignerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'assigner' field has an active Builder instance
     * @return True if the 'assigner' field has an active Builder instance
     */
    public boolean hasAssignerBuilder() {
      return assignerBuilder != null;
    }

    /**
      * Clears the value of the 'assigner' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Identifier.Builder clearAssigner() {
      assigner = null;
      assignerBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Identifier build() {
      try {
        Identifier record = new Identifier();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.use = fieldSetFlags()[1] ? this.use : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (typeBuilder != null) {
          try {
            record.type = this.typeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("type"));
            throw e;
          }
        } else {
          record.type = fieldSetFlags()[2] ? this.type : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[2]);
        }
        record.system = fieldSetFlags()[3] ? this.system : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (periodBuilder != null) {
          try {
            record.period = this.periodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("period"));
            throw e;
          }
        } else {
          record.period = fieldSetFlags()[4] ? this.period : (io.carrera.fhir.avro.models.Period) defaultValue(fields()[4]);
        }
        if (assignerBuilder != null) {
          try {
            record.assigner = this.assignerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("assigner"));
            throw e;
          }
        } else {
          record.assigner = fieldSetFlags()[5] ? this.assigner : (io.carrera.fhir.avro.models.Reference) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Identifier>
    WRITER$ = (org.apache.avro.io.DatumWriter<Identifier>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Identifier>
    READER$ = (org.apache.avro.io.DatumReader<Identifier>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










