/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Medication extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5809166195618271088L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Medication\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"implicitRules\",\"type\":[\"null\",\"string\"]},{\"name\":\"language\",\"type\":[\"null\",\"string\"]},{\"name\":\"text\",\"type\":[\"null\",\"string\"]},{\"name\":\"code\",\"type\":[\"null\",\"string\"]},{\"name\":\"status\",\"type\":[\"null\",\"string\"]},{\"name\":\"manufacturer\",\"type\":[\"null\",\"string\"]},{\"name\":\"form\",\"type\":[\"null\",\"string\"]},{\"name\":\"amount\",\"type\":[\"null\",\"string\"]},{\"name\":\"ingredient\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"batch\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Medication> ENCODER =
      new BinaryMessageEncoder<Medication>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Medication> DECODER =
      new BinaryMessageDecoder<Medication>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Medication> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Medication> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Medication> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Medication>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Medication to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Medication from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Medication instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Medication fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence resourceType;
   private java.lang.CharSequence id;
   private java.lang.CharSequence implicitRules;
   private java.lang.CharSequence language;
   private java.lang.CharSequence text;
   private java.lang.CharSequence code;
   private java.lang.CharSequence status;
   private java.lang.CharSequence manufacturer;
   private java.lang.CharSequence form;
   private java.lang.CharSequence amount;
   private java.util.List<java.lang.CharSequence> ingredient;
   private java.lang.CharSequence batch;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Medication() {}

  /**
   * All-args constructor.
   * @param resourceType The new value for resourceType
   * @param id The new value for id
   * @param implicitRules The new value for implicitRules
   * @param language The new value for language
   * @param text The new value for text
   * @param code The new value for code
   * @param status The new value for status
   * @param manufacturer The new value for manufacturer
   * @param form The new value for form
   * @param amount The new value for amount
   * @param ingredient The new value for ingredient
   * @param batch The new value for batch
   */
  public Medication(java.lang.CharSequence resourceType, java.lang.CharSequence id, java.lang.CharSequence implicitRules, java.lang.CharSequence language, java.lang.CharSequence text, java.lang.CharSequence code, java.lang.CharSequence status, java.lang.CharSequence manufacturer, java.lang.CharSequence form, java.lang.CharSequence amount, java.util.List<java.lang.CharSequence> ingredient, java.lang.CharSequence batch) {
    this.resourceType = resourceType;
    this.id = id;
    this.implicitRules = implicitRules;
    this.language = language;
    this.text = text;
    this.code = code;
    this.status = status;
    this.manufacturer = manufacturer;
    this.form = form;
    this.amount = amount;
    this.ingredient = ingredient;
    this.batch = batch;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resourceType;
    case 1: return id;
    case 2: return implicitRules;
    case 3: return language;
    case 4: return text;
    case 5: return code;
    case 6: return status;
    case 7: return manufacturer;
    case 8: return form;
    case 9: return amount;
    case 10: return ingredient;
    case 11: return batch;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resourceType = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    case 2: implicitRules = (java.lang.CharSequence)value$; break;
    case 3: language = (java.lang.CharSequence)value$; break;
    case 4: text = (java.lang.CharSequence)value$; break;
    case 5: code = (java.lang.CharSequence)value$; break;
    case 6: status = (java.lang.CharSequence)value$; break;
    case 7: manufacturer = (java.lang.CharSequence)value$; break;
    case 8: form = (java.lang.CharSequence)value$; break;
    case 9: amount = (java.lang.CharSequence)value$; break;
    case 10: ingredient = (java.util.List<java.lang.CharSequence>)value$; break;
    case 11: batch = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'resourceType' field.
   * @return The value of the 'resourceType' field.
   */
  public java.lang.CharSequence getResourceType() {
    return resourceType;
  }


  /**
   * Sets the value of the 'resourceType' field.
   * @param value the value to set.
   */
  public void setResourceType(java.lang.CharSequence value) {
    this.resourceType = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'implicitRules' field.
   * @return The value of the 'implicitRules' field.
   */
  public java.lang.CharSequence getImplicitRules() {
    return implicitRules;
  }


  /**
   * Sets the value of the 'implicitRules' field.
   * @param value the value to set.
   */
  public void setImplicitRules(java.lang.CharSequence value) {
    this.implicitRules = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.CharSequence getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.CharSequence value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'manufacturer' field.
   * @return The value of the 'manufacturer' field.
   */
  public java.lang.CharSequence getManufacturer() {
    return manufacturer;
  }


  /**
   * Sets the value of the 'manufacturer' field.
   * @param value the value to set.
   */
  public void setManufacturer(java.lang.CharSequence value) {
    this.manufacturer = value;
  }

  /**
   * Gets the value of the 'form' field.
   * @return The value of the 'form' field.
   */
  public java.lang.CharSequence getForm() {
    return form;
  }


  /**
   * Sets the value of the 'form' field.
   * @param value the value to set.
   */
  public void setForm(java.lang.CharSequence value) {
    this.form = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.CharSequence getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.CharSequence value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'ingredient' field.
   * @return The value of the 'ingredient' field.
   */
  public java.util.List<java.lang.CharSequence> getIngredient() {
    return ingredient;
  }


  /**
   * Sets the value of the 'ingredient' field.
   * @param value the value to set.
   */
  public void setIngredient(java.util.List<java.lang.CharSequence> value) {
    this.ingredient = value;
  }

  /**
   * Gets the value of the 'batch' field.
   * @return The value of the 'batch' field.
   */
  public java.lang.CharSequence getBatch() {
    return batch;
  }


  /**
   * Sets the value of the 'batch' field.
   * @param value the value to set.
   */
  public void setBatch(java.lang.CharSequence value) {
    this.batch = value;
  }

  /**
   * Creates a new Medication RecordBuilder.
   * @return A new Medication RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Medication.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.Medication.Builder();
  }

  /**
   * Creates a new Medication RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Medication RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Medication.Builder newBuilder(io.carrera.fhir.avro.models.Medication.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Medication.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Medication.Builder(other);
    }
  }

  /**
   * Creates a new Medication RecordBuilder by copying an existing Medication instance.
   * @param other The existing instance to copy.
   * @return A new Medication RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Medication.Builder newBuilder(io.carrera.fhir.avro.models.Medication other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Medication.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Medication.Builder(other);
    }
  }

  /**
   * RecordBuilder for Medication instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Medication>
    implements org.apache.avro.data.RecordBuilder<Medication> {

    private java.lang.CharSequence resourceType;
    private java.lang.CharSequence id;
    private java.lang.CharSequence implicitRules;
    private java.lang.CharSequence language;
    private java.lang.CharSequence text;
    private java.lang.CharSequence code;
    private java.lang.CharSequence status;
    private java.lang.CharSequence manufacturer;
    private java.lang.CharSequence form;
    private java.lang.CharSequence amount;
    private java.util.List<java.lang.CharSequence> ingredient;
    private java.lang.CharSequence batch;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Medication.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.implicitRules)) {
        this.implicitRules = data().deepCopy(fields()[2].schema(), other.implicitRules);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.code)) {
        this.code = data().deepCopy(fields()[5].schema(), other.code);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[7].schema(), other.manufacturer);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.form)) {
        this.form = data().deepCopy(fields()[8].schema(), other.form);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.amount)) {
        this.amount = data().deepCopy(fields()[9].schema(), other.amount);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.ingredient)) {
        this.ingredient = data().deepCopy(fields()[10].schema(), other.ingredient);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.batch)) {
        this.batch = data().deepCopy(fields()[11].schema(), other.batch);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Medication instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Medication other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.implicitRules)) {
        this.implicitRules = data().deepCopy(fields()[2].schema(), other.implicitRules);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.code)) {
        this.code = data().deepCopy(fields()[5].schema(), other.code);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[7].schema(), other.manufacturer);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.form)) {
        this.form = data().deepCopy(fields()[8].schema(), other.form);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.amount)) {
        this.amount = data().deepCopy(fields()[9].schema(), other.amount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ingredient)) {
        this.ingredient = data().deepCopy(fields()[10].schema(), other.ingredient);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.batch)) {
        this.batch = data().deepCopy(fields()[11].schema(), other.batch);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'resourceType' field.
      * @return The value.
      */
    public java.lang.CharSequence getResourceType() {
      return resourceType;
    }


    /**
      * Sets the value of the 'resourceType' field.
      * @param value The value of 'resourceType'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setResourceType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.resourceType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceType' field has been set.
      * @return True if the 'resourceType' field has been set, false otherwise.
      */
    public boolean hasResourceType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resourceType' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearResourceType() {
      resourceType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'implicitRules' field.
      * @return The value.
      */
    public java.lang.CharSequence getImplicitRules() {
      return implicitRules;
    }


    /**
      * Sets the value of the 'implicitRules' field.
      * @param value The value of 'implicitRules'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setImplicitRules(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.implicitRules = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'implicitRules' field has been set.
      * @return True if the 'implicitRules' field has been set, false otherwise.
      */
    public boolean hasImplicitRules() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'implicitRules' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearImplicitRules() {
      implicitRules = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.CharSequence getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setLanguage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.language = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setText(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.text = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearText() {
      text = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.code = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearCode() {
      code = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturer' field.
      * @return The value.
      */
    public java.lang.CharSequence getManufacturer() {
      return manufacturer;
    }


    /**
      * Sets the value of the 'manufacturer' field.
      * @param value The value of 'manufacturer'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setManufacturer(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.manufacturer = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturer' field has been set.
      * @return True if the 'manufacturer' field has been set, false otherwise.
      */
    public boolean hasManufacturer() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'manufacturer' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearManufacturer() {
      manufacturer = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'form' field.
      * @return The value.
      */
    public java.lang.CharSequence getForm() {
      return form;
    }


    /**
      * Sets the value of the 'form' field.
      * @param value The value of 'form'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setForm(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.form = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'form' field has been set.
      * @return True if the 'form' field has been set, false otherwise.
      */
    public boolean hasForm() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'form' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearForm() {
      form = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.CharSequence getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setAmount(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.amount = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ingredient' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getIngredient() {
      return ingredient;
    }


    /**
      * Sets the value of the 'ingredient' field.
      * @param value The value of 'ingredient'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setIngredient(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.ingredient = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ingredient' field has been set.
      * @return True if the 'ingredient' field has been set, false otherwise.
      */
    public boolean hasIngredient() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ingredient' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearIngredient() {
      ingredient = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'batch' field.
      * @return The value.
      */
    public java.lang.CharSequence getBatch() {
      return batch;
    }


    /**
      * Sets the value of the 'batch' field.
      * @param value The value of 'batch'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder setBatch(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.batch = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'batch' field has been set.
      * @return True if the 'batch' field has been set, false otherwise.
      */
    public boolean hasBatch() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'batch' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Medication.Builder clearBatch() {
      batch = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Medication build() {
      try {
        Medication record = new Medication();
        record.resourceType = fieldSetFlags()[0] ? this.resourceType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.implicitRules = fieldSetFlags()[2] ? this.implicitRules : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.language = fieldSetFlags()[3] ? this.language : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.text = fieldSetFlags()[4] ? this.text : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.code = fieldSetFlags()[5] ? this.code : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.manufacturer = fieldSetFlags()[7] ? this.manufacturer : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.form = fieldSetFlags()[8] ? this.form : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.amount = fieldSetFlags()[9] ? this.amount : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.ingredient = fieldSetFlags()[10] ? this.ingredient : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[10]);
        record.batch = fieldSetFlags()[11] ? this.batch : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Medication>
    WRITER$ = (org.apache.avro.io.DatumWriter<Medication>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Medication>
    READER$ = (org.apache.avro.io.DatumReader<Medication>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.resourceType);

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.implicitRules == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.implicitRules);
    }

    if (this.language == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.language);
    }

    if (this.text == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.text);
    }

    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.manufacturer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.manufacturer);
    }

    if (this.form == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.form);
    }

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.amount);
    }

    if (this.ingredient == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.ingredient.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.ingredient) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.batch == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.batch);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.resourceType = in.readString(this.resourceType instanceof Utf8 ? (Utf8)this.resourceType : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.implicitRules = null;
      } else {
        this.implicitRules = in.readString(this.implicitRules instanceof Utf8 ? (Utf8)this.implicitRules : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.language = null;
      } else {
        this.language = in.readString(this.language instanceof Utf8 ? (Utf8)this.language : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.text = null;
      } else {
        this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.manufacturer = null;
      } else {
        this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.form = null;
      } else {
        this.form = in.readString(this.form instanceof Utf8 ? (Utf8)this.form : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ingredient = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.ingredient;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("ingredient").schema().getTypes().get(1));
          this.ingredient = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.batch = null;
      } else {
        this.batch = in.readString(this.batch instanceof Utf8 ? (Utf8)this.batch : null);
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.resourceType = in.readString(this.resourceType instanceof Utf8 ? (Utf8)this.resourceType : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.implicitRules = null;
          } else {
            this.implicitRules = in.readString(this.implicitRules instanceof Utf8 ? (Utf8)this.implicitRules : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.language = null;
          } else {
            this.language = in.readString(this.language instanceof Utf8 ? (Utf8)this.language : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.text = null;
          } else {
            this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.manufacturer = null;
          } else {
            this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.form = null;
          } else {
            this.form = in.readString(this.form instanceof Utf8 ? (Utf8)this.form : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readString(this.amount instanceof Utf8 ? (Utf8)this.amount : null);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ingredient = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.ingredient;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("ingredient").schema().getTypes().get(1));
              this.ingredient = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.batch = null;
          } else {
            this.batch = in.readString(this.batch instanceof Utf8 ? (Utf8)this.batch : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










